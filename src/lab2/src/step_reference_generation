#!/usr/bin/env python3
# ===============================================================
#	Curso   :   Legged robots
# 	Alumno  :   Jhon Charaja
#   Lab     :   2 (Joint space motion control)
#   Activity:   1.2
# 	Info	:	Generate step joint reference for ur5 robot
# ===============================================================

# =============
#   Libraries
# ============= 
import os
import rospy
import pandas as pd
import numpy as np
from sensor_msgs.msg import JointState
from lab_functions import *


# =============
#   Save data
# =============
# directory to save data
origin 	= '../data/'
suffix 	= 'act_1.2'
pwd = os.path.dirname(os.path.realpath(__file__))
folder = os.path.join(pwd, origin, suffix)

# creates folder if it does not exist
if not os.path.exists(folder):
    os.makedirs(folder)

column_names = [
    't',
    'q1_des', 'q2_des', 'q3_des', 'q4_des', 'q5_des', 'q6_des',
    'dq1_des', 'dq2_des', 'dq3_des', 'dq4_des', 'dq5_des', 'dq6_des',
    'ddq1_des', 'ddq2_des', 'ddq3_des', 'ddq4_des', 'ddq5_des', 'ddq6_des' 
]

df = pd.DataFrame(columns=column_names)
file_name = 'data'
path = os.path.join(folder, file_name)

df.to_csv(path, index=False) 

# =========================
#   Configuration of node
# =========================
# create a node: 
rospy.init_node("node_step_reference_generation")

# public in topic /joint_states	to send joint data	
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

# loop rate (in Hz)
rate 	= rospy.Rate(1000)		# [Hz]
dt 		= 1e-3					# [ms]

# object(message) type JointState
jstate = JointState()

# ===========================
#   UR5 robot configuration
# ===========================
# joints name of UR5 robot
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
# number of degress of freedom
ndof = 6

# ==========================================
#   Set initial joint configuration of UR5
# ==========================================
# initial configuration: position, velocity and acceleration 
q0   = np.array([np.pi, -np.pi/8,  -np.pi/6, 0.0, 0.0, 0.0])
dq0  = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
ddq0 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) 

# desired trajectory: position, velocity and acceleration
q_des   = np.array([np.pi, -np.pi/8,  -np.pi/6, 0.0, 0.0, 0.0])
dq_des  = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
ddq_des = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])

#===============
#   Simulation
#===============
t = 0.0             # [sec] 
sim_duration = 5.0  # [sec]
step_start = 2.0    # [sec]

while not rospy.is_shutdown():
    # generate step reference after 2 seconds
    if t>=step_start:
        # second link
        q_des[1], dq_des[1], ddq_des[1] = step_reference_generator(q0[1],-0.4)
        # fifth link
        q_des[4], dq_des[4], ddq_des[4] = step_reference_generator(q0[4], 0.5)

    # publish message
    jstate.header.stamp = rospy.Time.now()
    jstate.name 		= jnames    # Joints position name
    jstate.position 	= q_des     # joint position
    jstate.velocity 	= dq_des    # joint velocity
    pub.publish(jstate)

    # update time
    t = t + dt
    
    # Append data
    row = tl(np.array([t])) + tl(q_des) + tl(dq_des)+tl(ddq_des)
    # Fix for redimensionality
    df_row = pd.DataFrame.from_dict(dict(zip(column_names, tl(np.expand_dims(np.array(row), axis = 1)))))
    df.append(df_row, sort = False).to_csv(path, index=False, mode = 'a', header=False)     
    
    # stop simulation    
    if t>=sim_duration:
        print("stopping rviz ...")
        break

    rate.sleep()