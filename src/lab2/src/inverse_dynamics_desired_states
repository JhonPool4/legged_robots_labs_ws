#!/usr/bin/env python3
# ===============================================================
#	Curso   :   Legged robots
# 	Alumno  :   Jhon Charaja
#   Lab     :   2 (Joint space motion control)
#   Activity:   2.5
# 	Info	:	feedback linearization + PD 
# ===============================================================

# =============
#   Libraries
# ============= 
import os
import rospy
import numpy as np
import pandas as pd
from copy import copy
from sensor_msgs.msg import JointState
from labpythonlib.lab_functions import *

# =============
#   Save data
# =============
# directory to save data
origin 	= '../data/'
matlab = "../document/images/"
suffix 	= 'act_2.6'
pwd = os.path.dirname(os.path.realpath(__file__))
folder = os.path.join(pwd, origin, suffix)
matlab_folder = os.path.join(pwd, matlab, suffix)

# creates folder if it does not exist
if not os.path.exists(folder):
    os.makedirs(folder)

if not os.path.exists(matlab_folder):
    os.makedirs(matlab_folder)

column_names = [
    't',

    'e1', 'e2', 'e3', 'e4', 'e5', 'e6',
	
    'q1', 'q2', 'q3', 'q4', 'q5', 'q6',
	'dq1', 'dq2', 'dq3', 'dq4', 'dq5', 'dq6',
	'ddq1', 'ddq2', 'ddq3', 'ddq4', 'ddq5', 'ddq6',
        
    'q1_des', 'q2_des', 'q3_des', 'q4_des', 'q5_des', 'q6_des',
    'dq1_des', 'dq2_des', 'dq3_des', 'dq4_des', 'dq5_des', 'dq6_des',
    'ddq1_des', 'ddq2_des', 'ddq3_des', 'ddq4_des', 'ddq5_des', 'ddq6_des' 
]

df = pd.DataFrame(columns=column_names)
file_name = 'data'
path = os.path.join(folder, file_name)

df.to_csv(path, index=False) 


# =========================
#   Configuration of node
# =========================
# create a node: 
rospy.init_node("node_inverse_dynamics_desired_states")

# public in topic /joint_states	to send joint data	
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

# loop rate (in Hz)
rate 	= rospy.Rate(1000)		# 100 [Hz]
dt 		= 1e-3					# 10  [ms]

# object(message) type JointState
jstate = JointState()

# ==========================================
#   Set initial joint configuration of UR5
# ==========================================
# initial configuration: position, velocity and acceleration 
q0 =   np.array([np.pi, -np.pi/8,  -np.pi/6, 0.0, 0.0, 0.0])
dq0 =  np.array([0.0, 0.4*np.pi, 0.0, 0.0, 1.2*np.pi, 0.0]) 
ddq0 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) 

# desired trajectory: position, velocity and acceleration
q_des =   np.array([np.pi, -np.pi/8,  -np.pi/6, 0.0, 0.0, 0.0]) 
dq_des =  np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) 
ddq_des = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) 

# measured trajectory: position, velocity and acceleration
q =   np.array([np.pi, -np.pi/8,  -np.pi/6, 0.0, 0.0, 0.0])
dq =  np.array([0.0, 0.4*np.pi, 0.0, 0.0, 1.2*np.pi, 0.0]) 
ddq = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) 

# ===========================
#   UR5 robot configuration
# ===========================
# joints name of UR5 robot
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
# path of labs_ur5.urdf
urdf_path = os.path.join(pwd, "../../ur5_description/urdf/labs_ur5.urdf")
# load the ur5.urdf
ur5_robot = pin.robot_wrapper.RobotWrapper.BuildFromURDF(urdf_path)
# number of degress of freedom
ndof = ur5_robot.model.nq

# create inertia matrix 
M = np.zeros([ndof,ndof])
# create nonlinear effects vector
b = np.zeros(ndof)

# ===============================
#   PD controller configuration
# ===============================
# proportional gain
kp = 600*np.ones(ndof)
# derivative gain
kd = 2*np.sqrt(kp[0])*np.ones(ndof)
# control vector
tau = np.zeros(ndof)    

#===============
#   Simulation
#===============
t = 0.0             # [sec] 
sim_duration = 5.0  # [sec]
sine_duration = 4.0 # [sec]

while not rospy.is_shutdown():
    # generate sinusoidal joint reference
    if t<=sine_duration:
        # second link
        q_des[1], dq_des[1], ddq_des[1] = sinusoidal_reference_generator(q0[1], 0.2, 1, t)
        last_q_des_1 = q_des[1]
        # fifth link
        q_des[4], dq_des[4], ddq_des[4] = sinusoidal_reference_generator(q0[4], 0.4, 1.5, t)  
        last_q_des_4 = q_des[4]  
    else:
        # second link
        q_des[1], dq_des[1], ddq_des[1] = step_reference_generator(0, last_q_des_1)
        # fifth link
        q_des[4], dq_des[4], ddq_des[4] = step_reference_generator(0 , last_q_des_4)

    # error: position and velocity
    e 	=  q_des - q
    de 	=  dq_des - dq    

    # compute inertia matrix
    M = pin.crba(ur5_robot.model, ur5_robot.data, q)

    # compute nonlinear effects vector
    b = pin.rnea(ur5_robot.model, ur5_robot.data, q, dq, np.zeros(ndof))

    # control law: PD control + Feedback linearization
    tau = M.dot(ddq_des +  np.multiply(kp, e) + np.multiply(kd, de)) + b
    
    # update states
    ddq = np.linalg.inv(M).dot(tau-b)
    dq  =  dq + dt*ddq
    q   =  q + dt*dq + 0.5*dt*dt*ddq

    # publish message
    jstate.header.stamp = rospy.Time.now()
    jstate.name 		= jnames			# Joints position name
    jstate.position 	= q
    jstate.velocity 	= dq
    pub.publish(jstate)

    # update time
    t = t + dt

    # Append data
    row = tl(np.array([t])) + tl(e) + tl(q) + tl(dq)+tl(ddq) + tl(q_des) + tl(dq_des)+tl(ddq_des)
    # Fix for redimensionality
    df_row = pd.DataFrame.from_dict(dict(zip(column_names, tl(np.expand_dims(np.array(row), axis = 1)))))
    df.append(df_row, sort = False).to_csv(path, index=False, mode = 'a', header=False)     
    
    # stop simulation
    if t>=sim_duration:
        print("stopping rviz ...")
        break
    rate.sleep()